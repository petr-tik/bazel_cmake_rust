#+TITLE: Todo

* cc_library and tests that rely on cmake lib and rust lib
Going to learn me a Bazel by wiring cmake, native cc and rules_rust-based
libraries and build targets.

In the end, i would like to be able to build cpp libraries and tests that
use APIs from third-party cmake-built libraries and in-repo rust libraries.

** DONE Get a cmake lib to build in bazel
the lib_name attribute in the cmake starlark function has to match the `add_library($NAME)` passed to cmake.

Now that it does - we are all good.

** DONE Create a cc_library

*** DONE get it to build

*** DONE Create a binary that calls native cc_lib and cmake lib

**** DONE add a dependency on the cmake lib
call it in the internals

** DONE create a rust library with ffi that exposes a function

*** DONE create a rust test executable

*** DONE make the rust public ABI/API return an int

** TODO create a cc_test that chains calls to rust_lib and then cmake_lib
assert the outcome as expected

** TODO Add a dependency on the cmake-buildable lib for formatting
https://github.com/fmtlib/fmt

pretty-print a string
#+begin_src cpp
#include <fmt/color.h>

fmt::print(fg(fmt::color::crimson) | fmt::emphasis::bold, "Hello, {}!\n", "world");
#+end_src

** TODO modify a string in rust then pass it to cc_library to fmt pretty print

** TODO define a proper toolchain to stop passing
gcc-7 and g++-7 as env vars

https://bazel.build/tutorials/cc-toolchain-config

** TODO use mold linker in the toolchain and compare link times

** TODO get clangd working for cpp

** TODO get rust-analyzer working for rust lib

** TODO add python tests to this

** TODO change publicity of cmake lib
