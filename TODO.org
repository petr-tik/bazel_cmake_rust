#+TITLE: Todo

* cc_library and tests that rely on cmake lib and rust lib
Going to learn me a Bazel by wiring cmake, native cc and rules_rust-based
libraries and build targets.

In the end, i would like to be able to build cpp libraries and tests that
use APIs from third-party cmake-built libraries and in-repo rust libraries.

** DONE Get a cmake lib to build in bazel
the lib_name attribute in the cmake starlark function has to match the `add_library($NAME)` passed to cmake.

Now that it does - we are all good.

** DONE Create a cc_library

*** DONE get it to build

*** DONE Create a binary that calls native cc_lib and cmake lib

**** DONE add a dependency on the cmake lib
call it in the internals

** DONE create a rust library with ffi that exposes a function

*** DONE create a rust test executable

*** DONE make the rust public ABI/API return an int

** DONE add a pure function to cmake lib that takes an int

** DONE create a cc_test that chains calls to rust_lib and then cmake_lib
assert the outcome as expected

** DONE add an expect throw test for a rust panic
*** How do you view full rust backtrace when it's linked into a cc_test?
bazel test --test_output all //... --test_env=RUST_BACKTRACE=full

even better - you can set an env var for a particular test
*** Rust panics when linked to cc_library
gtest EXPECT_ANY_THROW doesn't catch it properly, so we need a different kind of test

** DONE Restrict targets' publicity to more private by default
** IDEA Add a dependency on an external lib for formatting
https://github.com/fmtlib/fmt

pretty-print a string in the current cmake lib
#+begin_src cpp
#include <fmt/color.h>

fmt::print(fg(fmt::color::crimson) | fmt::emphasis::bold, "Hello, {}!\n", "world");
#+end_src
*** DONE First make cc_library depend on it
*** HOLD then make my in-repo cmake library depend on it
cannot get it to work, so will shelve
** DONE extend rust library
*** DONE modify a string in rust then pass it to cc_library to fmt pretty print
** TODO define proper toolchains instead of env vars
https://bazel.build/tutorials/cc-toolchain-config

*** STRT use mold linker
Use the llvm_toolchain that enables overriding the fuse-ld argument that results in mold being used
https://github.com/grailbio/bazel-toolchain/pull/137#issue-1162297318
**** IDEA confirm all test executables are linked with mold
***** HOLD Write a bazel query that returns paths to all cc_* and rust_* test executables
Pipe those file paths to -exec =readelf -p .comment {} ;\=

cannot create a bazel query to get paths to all built executables
***** DONE write find one-liner
#+begin_src bash
find bazel-bin/ -type f -executable -iname '*test*' -not -name '*params' -not -name '*.pic.*' -not -name '*runfiles_manifest' -exec readelf -p .comment {} \;
#+end_src
**** TODO compare link times across 2 toolchains
*** TODO define a gcc-7 toolchain
gcc-7 and g++-7 as env vars

*** TODO define a clang-11 toolchain
works as env vars too

*** TODO use n2 instead of ninja
native_tools_toolchains 	pass the toolchains for toolchain types '@rules_foreign_cc//toolchains:cmake_toolchain' and '@rules_foreign_cc//toolchains:ninja_toolchain' with the needed platform constraints. If you do not pass anything, registered default toolchains will be selected (see below).

point ninja_toolchain at n2

**** TODO might need to teach bazel to build n2 from source
**** TODO pass additional arguments to record a trace

n2 can record a trace with -d trace. use that

*** TODO create dbg and release configs

** WAIT get clangd working for cpp
https://github.com/hedronvision/bazel-compile-commands-extractor

*** WAIT blocking on old python
https://github.com/hedronvision/bazel-compile-commands-extractor/issues/46
** DONE get rust-analyzer working for rust lib

#+begin_src bash
bazel run @rules_rust//tools/rust_analyzer:gen_rust_project
#+end_src
** STRT Write timestamped file analyzing .ninja_log
Works, but cannot find where the log file goes. Possibly lost forever
*** TODO Recover the file written POST_BUILD?

** TODO add a dependency on an external cmake buildable lib
** TODO add a dependency on system-installed .a library with public headers
Found this library
/usr/lib/llvm-10/lib/libLLVMDebugInfoDWARF.a

with a bunch of headers here
ls /usr/lib/llvm-10/include/llvm/DebugInfo/DWARF/DWARF*

https://bazel.build/reference/be/c-cpp#cc_import
#+begin_src bazel
cc_import(
  name = "LLVMDebugInfoDwarf",
  # hdrs = glob(["/usr/lib/llvm-10/include/llvm/DebugInfo/DWARF/*.h"]),
  static_library = "/usr/lib/llvm-10/lib/libLLVMDebugInfoDWARF.a",
)
#+end_src

** TODO add cxx-rs and link it with a third-party cmake lib
** TODO benchmark cpp vs rust
*** TODO Implement the same method that calculates the sum of squares of vec<int>
*** TODO add a google benchmark that calls cpp and rust
*** TODO use external crate rayon to parallelise this sum of squares operation
** TODO extend python tests
** TODO make a cli tool
Combine the advantages of Rust:
+ Memory safe to untrusted inputs
+ Fearless concurrency

with the strengths of Cpp
+ Top quality existing libraries like OpenCV, tensorflow and others

Build a command line tool
